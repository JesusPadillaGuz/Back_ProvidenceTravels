// <auto-generated />
using System;
using API_Agencia.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace API_Agencia.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20210109172135_First_migration")]
    partial class First_migration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("API_Agencia.Models.Abono", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<double>("Cantidad_Abono")
                        .HasColumnType("float");

                    b.Property<int>("ClienteID")
                        .HasColumnType("int");

                    b.Property<int>("ContratoID")
                        .HasColumnType("int");

                    b.Property<int>("Folio_Abono")
                        .HasColumnType("int");

                    b.Property<string>("Notas")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Saldo_Anterior")
                        .HasColumnType("float");

                    b.Property<int>("UsuarioID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ClienteID");

                    b.HasIndex("ContratoID");

                    b.HasIndex("UsuarioID");

                    b.ToTable("Abonos");
                });

            modelBuilder.Entity("API_Agencia.Models.Acceso", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Accesos");
                });

            modelBuilder.Entity("API_Agencia.Models.Cliente", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefono")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Clientes");
                });

            modelBuilder.Entity("API_Agencia.Models.Contrato", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<double>("Anticipo")
                        .HasColumnType("float");

                    b.Property<int>("ClienteID")
                        .HasColumnType("int");

                    b.Property<double>("CostoTotal")
                        .HasColumnType("float");

                    b.Property<string>("Documento_ContratoURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Fecha_Inicio_Contrato")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Fecha_LimPago")
                        .HasColumnType("datetime2");

                    b.Property<string>("Folio_Contrato")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("Localizador")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notas")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Politicas_Pago")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Saldo_Restante")
                        .HasColumnType("float");

                    b.Property<int>("ServicioID")
                        .HasColumnType("int");

                    b.Property<int>("UsuarioID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ClienteID");

                    b.HasIndex("ServicioID");

                    b.HasIndex("UsuarioID");

                    b.ToTable("Contratos");
                });

            modelBuilder.Entity("API_Agencia.Models.Paquete", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagenesURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notas")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Precio_Ad")
                        .HasColumnType("float");

                    b.Property<double>("Precio_Jr")
                        .HasColumnType("float");

                    b.Property<double>("Precio_Mr")
                        .HasColumnType("float");

                    b.Property<int>("ServicioID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ServicioID");

                    b.ToTable("Paquetes");
                });

            modelBuilder.Entity("API_Agencia.Models.PersonaExtra", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("ContratoID")
                        .HasColumnType("int");

                    b.Property<int>("Edad")
                        .HasColumnType("int");

                    b.Property<int>("TipoPersonaID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ContratoID");

                    b.HasIndex("TipoPersonaID");

                    b.ToTable("PersonasExtra");
                });

            modelBuilder.Entity("API_Agencia.Models.Servicio", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Fecha_Fin")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Fecha_Inicio")
                        .HasColumnType("datetime2");

                    b.Property<int>("TipoServicioID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("TipoServicioID");

                    b.ToTable("Servicios");
                });

            modelBuilder.Entity("API_Agencia.Models.Sesion", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Fecha_Creacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Fecha_Terminacion")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UsuarioID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("UsuarioID");

                    b.ToTable("Sesiones");
                });

            modelBuilder.Entity("API_Agencia.Models.TipoPersona", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("TiposPersona");
                });

            modelBuilder.Entity("API_Agencia.Models.TipoServicio", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("TiposServicio");
                });

            modelBuilder.Entity("API_Agencia.Models.TipoUsuario", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("TiposUsuario");
                });

            modelBuilder.Entity("API_Agencia.Models.Usuario", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("AccesoID")
                        .HasColumnType("int");

                    b.Property<string>("Apellido")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TipoUsuarioID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("AccesoID");

                    b.HasIndex("TipoUsuarioID");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("API_Agencia.Models.Abono", b =>
                {
                    b.HasOne("API_Agencia.Models.Cliente", "Cliente")
                        .WithMany("Abonos")
                        .HasForeignKey("ClienteID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API_Agencia.Models.Contrato", "Contrato")
                        .WithMany("Abonos")
                        .HasForeignKey("ContratoID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("API_Agencia.Models.Usuario", "Usuario")
                        .WithMany("Abonos")
                        .HasForeignKey("UsuarioID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");

                    b.Navigation("Contrato");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("API_Agencia.Models.Contrato", b =>
                {
                    b.HasOne("API_Agencia.Models.Cliente", "Cliente")
                        .WithMany("Contratos")
                        .HasForeignKey("ClienteID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API_Agencia.Models.Servicio", "Servicio")
                        .WithMany("Contratos")
                        .HasForeignKey("ServicioID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API_Agencia.Models.Usuario", "Usuario")
                        .WithMany("Contratos")
                        .HasForeignKey("UsuarioID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");

                    b.Navigation("Servicio");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("API_Agencia.Models.Paquete", b =>
                {
                    b.HasOne("API_Agencia.Models.Servicio", "Servicio")
                        .WithMany("Paquetes")
                        .HasForeignKey("ServicioID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Servicio");
                });

            modelBuilder.Entity("API_Agencia.Models.PersonaExtra", b =>
                {
                    b.HasOne("API_Agencia.Models.Contrato", "Contrato")
                        .WithMany("PersonasExtra")
                        .HasForeignKey("ContratoID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API_Agencia.Models.TipoPersona", "TipoPersona")
                        .WithMany("PersonasExtra")
                        .HasForeignKey("TipoPersonaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contrato");

                    b.Navigation("TipoPersona");
                });

            modelBuilder.Entity("API_Agencia.Models.Servicio", b =>
                {
                    b.HasOne("API_Agencia.Models.TipoServicio", "TipoServicio")
                        .WithMany("Servicios")
                        .HasForeignKey("TipoServicioID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TipoServicio");
                });

            modelBuilder.Entity("API_Agencia.Models.Sesion", b =>
                {
                    b.HasOne("API_Agencia.Models.Usuario", "Usuario")
                        .WithMany("Sesiones")
                        .HasForeignKey("UsuarioID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("API_Agencia.Models.Usuario", b =>
                {
                    b.HasOne("API_Agencia.Models.Acceso", null)
                        .WithMany("Usuarios")
                        .HasForeignKey("AccesoID");

                    b.HasOne("API_Agencia.Models.TipoUsuario", "TipoUsuario")
                        .WithMany("Usuarios")
                        .HasForeignKey("TipoUsuarioID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TipoUsuario");
                });

            modelBuilder.Entity("API_Agencia.Models.Acceso", b =>
                {
                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("API_Agencia.Models.Cliente", b =>
                {
                    b.Navigation("Abonos");

                    b.Navigation("Contratos");
                });

            modelBuilder.Entity("API_Agencia.Models.Contrato", b =>
                {
                    b.Navigation("Abonos");

                    b.Navigation("PersonasExtra");
                });

            modelBuilder.Entity("API_Agencia.Models.Servicio", b =>
                {
                    b.Navigation("Contratos");

                    b.Navigation("Paquetes");
                });

            modelBuilder.Entity("API_Agencia.Models.TipoPersona", b =>
                {
                    b.Navigation("PersonasExtra");
                });

            modelBuilder.Entity("API_Agencia.Models.TipoServicio", b =>
                {
                    b.Navigation("Servicios");
                });

            modelBuilder.Entity("API_Agencia.Models.TipoUsuario", b =>
                {
                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("API_Agencia.Models.Usuario", b =>
                {
                    b.Navigation("Abonos");

                    b.Navigation("Contratos");

                    b.Navigation("Sesiones");
                });
#pragma warning restore 612, 618
        }
    }
}
